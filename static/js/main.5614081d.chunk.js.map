{"version":3,"sources":["Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Step","apiUrl","useStyles","makeStyles","theme","body","backgroundColor","palette","common","white","progress","margin","spacing","snackbarClose","padding","error","dark","paper","mixins","gutters","justify","display","flexDirection","alignItems","avatar","secondary","main","form","width","marginTop","submit","defaultState","step","Login","waiting","sessions","SignIn","classes","useState","snackBar","setSnackBar","closeSnackBar","state","setState","username","setUsernameState","password","setPassword","Set","semesters","setSemsters","clearSemester","showError","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","variant","noValidate","TextField","required","fullWidth","id","label","name","autoComplete","autoFocus","onChange","e","setUsername","target","value","type","map","index","FormControlLabel","key","control","Checkbox","checked","has","semester","s","add","delete","Button","color","disabled","onClick","SessionSelect","axios","post","then","response","data","catch","responseType","selection","Array","from","suggestedFileName","headers","effectiveFileName","undefined","FileSaver","saveAs","finally","CircularProgress","size","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","ContentProps","message","action","IconButton","aria-label","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5614081d.chunk.js","sourcesContent":["import axios from 'axios';\nimport FileSaver from 'file-saver';\nimport React, { useState, ReactElement } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst apiUrl = 'http://82.165.113.34:5000/';\nconst useStyles = makeStyles(theme => ({\n  '@global': {\n    body: {\n      backgroundColor: theme.palette.common.white,\n    },\n  },\n  progress: {\n    margin: theme.spacing(0),\n  },\n  snackbarClose: {\n    padding: theme.spacing(0.5),\n    backgroundColor: theme.palette.error.dark,\n  },\n  paper: {\n    ...theme.mixins.gutters(),\n    padding: theme.spacing(0) * 2,\n    margin: theme.spacing(0) * 2,\n    justify: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nenum Step {\n  Login,\n  SessionSelect,\n}\n\ntype SessionList = string[];\n\ninterface State {\n  step: Step;\n  waiting: boolean;\n  sessions: SessionList;\n}\n\nconst defaultState: State = {\n  step: Step.Login,\n  waiting: false,\n  sessions: [],\n};\n\nexport default function SignIn(): ReactElement {\n  const classes = useStyles();\n\n  const [snackBar, setSnackBar] = useState(false);\n  function openSnackBar(): void {\n    setSnackBar(true);\n  }\n  function closeSnackBar(): void {\n    setSnackBar(false);\n  }\n\n  const [state, setState] = useState(defaultState);\n  const { step, waiting, sessions } = state;\n  const [username, setUsernameState] = useState();\n  const [password, setPassword] = useState();\n\n  const [semesters, setSemsters] = useState(new Set<number>());\n  const clearSemester = (): void => setSemsters(new Set<number>());\n  const changeSemester = (semester: number) => (state: boolean): void => {\n    const s = new Set(semesters);\n    if (state) {\n      s.add(semester);\n    } else {\n      s.delete(semester);\n    }\n    setSemsters(s);\n  };\n  function setUsername(username: string): void {\n    if (step != Step.Login) {\n      setState(defaultState);\n      clearSemester();\n    }\n    setUsernameState(username);\n  }\n\n  function showError(): void {\n    openSnackBar();\n    setState({\n      step,\n      waiting: false,\n      sessions,\n    });\n  }\n\n  function changeState(): void {\n    if (waiting) return;\n    if (step === Step.Login) {\n      setState({\n        step: Step.SessionSelect,\n        waiting: true,\n        sessions: [],\n      });\n      axios\n        .post<SessionList>(apiUrl + 'sessions', {\n          username,\n          password,\n        })\n        .then(response => {\n          setState({\n            step: Step.SessionSelect,\n            waiting: false,\n            sessions: response.data,\n          });\n        })\n        .catch(showError);\n    } else if (step === Step.SessionSelect) {\n      setState({\n        ...state,\n        waiting: true,\n      });\n      axios\n        .post(\n          apiUrl + 'calendar',\n          {\n            responseType: 'blob',\n\n            username,\n            password,\n            selection: Array.from(semesters),\n          },\n          {\n            responseType: 'blob',\n          },\n        )\n        .then(response => {\n          // from SO\n\n          const fileNameHeader = 'x-suggested-filename';\n          const suggestedFileName = response.headers[fileNameHeader];\n          const effectiveFileName = suggestedFileName === undefined ? 'calendar.ics' : suggestedFileName;\n          FileSaver.saveAs(response.data, effectiveFileName);\n        })\n        .catch(showError)\n        .finally(() => {\n          setState({\n            ...state,\n            waiting: false,\n          });\n        });\n    }\n  }\n  return (\n    <div>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.form} noValidate>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Username(maticule)\"\n              name=\"email\"\n              autoComplete=\"username\"\n              autoFocus\n              onChange={(e): void => setUsername(e.target.value)}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password(Unip)\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              onChange={(e): void => setPassword(e.target.value)}\n            />\n            {sessions.map((value, index) => (\n              <FormControlLabel\n                key={index}\n                control={\n                  <Checkbox\n                    checked={semesters.has(index)}\n                    onChange={(e): void => {\n                      changeSemester(index)(e.target.checked);\n                    }}\n                  />\n                }\n                label={value}\n              />\n            ))}\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={waiting}\n              className={classes.submit}\n              onClick={changeState}\n            >\n              {waiting ? <CircularProgress size={24} className={classes.progress} /> : 'GET'}\n            </Button>\n          </form>\n        </div>\n      </Container>\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={snackBar}\n        autoHideDuration={6000}\n        onClose={closeSnackBar}\n        ContentProps={{\n          'aria-describedby': 'message-id',\n        }}\n        message={<span id=\"message-id\">something went wrong</span>}\n        action={[\n          <IconButton\n            key=\"close\"\n            aria-label=\"close\"\n            color=\"inherit\"\n            className={classes.snackbarClose}\n            onClick={closeSnackBar}\n          >\n            <CloseIcon />\n          </IconButton>,\n        ]}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Main from './Main'\nconst App: React.FC = () => {\n  return (\n    <Main/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}